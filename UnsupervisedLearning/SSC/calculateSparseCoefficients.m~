function [ CMat ] = calculateSparseCoefficients( Xp,lambda,kernel)
%CALCULATESPARSECOEFFICIENTS Calculate sparse regressors as a part of SSC
%algorithm
%   Convex optimization problem will be solved for sparse regressors of the
%   SSC algorithm
%
%   Input:
%       Xp          -       DxN data matrix of N data points
%       lambda      -       regula
%

%--------------------------------------------------------------------------
% This function takes the D x N matrix of N data points and write every
% point as a sparse linear combination of other points.
% Xp: D x N matrix of N data points
% lambda: regularizartion parameter of LASSO, typically between 0.001 and
% 0.1
% CMat: N x N matrix of coefficients, column i correspond to the sparse
% coefficients of data point in column i of Xp
%--------------------------------------------------------------------------
% Copyright @ Ehsan Elhamifar, 2010
%--------------------------------------------------------------------------

D = size(Xp,1);
N = size(Xp,2);

kernelMode=0;

if (nargin < 2)
    lambda = 0.001;
end

if nargin==3
    kernelMode=1;
    K=zeros(N-1,N-1);
    Kv_y=zeros(N-1,1);
end




for i = 1:N
    
    fprintf(1,'%3g data record out of %3g \n',i,N);
    
    y = Xp(:,i);
    if i == 1
        Y = Xp(:,i+1:end);
    elseif ( (i > 1) && (i < N) )
        Y = [Xp(:,1:i-1) Xp(:,i+1:N)];
    else
        Y = Xp(:,1:N-1);
    end
    
    
    if (kernelMode==0)
        
        % original SSC algorithm
        cvx_begin;
        
        cvx_quiet true;
        cvx_precision high
        variable c(N-1,1);
        minimize( norm(c,1) + lambda * norm(Y * c  - y) );
        subject to
        
        cvx_end;
        
    else
        
        % kernel variant of the SSC algorithm
        
        K_yy=kernel(y,y);
       
        for s=1:(N-1)
            Kv_y(s)=kernel(Y(:,s),y);
            for j=1:(N-1)
                K(s,j)=kernel(Y(:,s),Y(:,j));
            end
        end
        
        %version 1
        cvx_begin;
        
        cvx_quiet true;
        cvx_precision high
        variable c(N-1,1);
        minimize( norm(c,1)+lambda*(K_yy-2*c'*(Kv_y)+quad_form(c,K)));
        subject to
        
        cvx_end;
        
    end
    
    
    % place 0's in the diagonals of the coefficient matrix
    if i == 1
        CMat(1,1) = 0;
        CMat(2:N,1) = c(1:N-1);
    elseif ( (i > 1) && (i < N) )
        CMat(1:i-1,i) = c(1:i-1);
        CMat(i,i) = 0;
        CMat(i+1:N,i) = c(i:N-1);
    else
        CMat(1:N-1,N) = c(1:N-1);
        CMat(N,N) = 0;
    end
    
    
end

